{"ast":null,"code":"import cartReducer from \"./cartReducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // Local storage for persistence\n\n//const stripe = require('stripe')('pk_test_51Nh8aOFJOqhv3053x1RQF8aROyyt8AXUWxtY5VHvp0ZUKeYlu24GRux3TC8bALDJ3o68h10UshxFNIxoeUvXDqHq008yG8u5Lr');\n\n// Configuration for Redux Persist\nconst persistConfig = {\n  key: \"root\",\n  // Key to identify the root of the persisted state\n  version: 1,\n  storage // Storage method (local storage in this case)\n};\n\n// Create a persisted reducer using Redux Persist\nconst persistedReducer = persistReducer(persistConfig, cartReducer);\n\n// Configure the Redux store\nexport const store = configureStore({\n  reducer: {\n    cart: persistedReducer // Using the persisted reducer for the 'cart' slice\n  },\n\n  middleware: getDefaultMiddleware =>\n  // Configure serializability checking for actions\n  getDefaultMiddleware({\n    // Ignore these specific action types when checking serializability\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\n\n// Create a persistor to persist the store using Redux Persist\nexport let persistor = persistStore(store);","map":{"version":3,"names":["cartReducer","configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","persistConfig","key","version","persistedReducer","store","reducer","cart","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"sources":["C:/Users/Marcia/OneDrive/Escritorio/Web-dev/Working/Ecommerce-2023/client/src/redux/store.js"],"sourcesContent":["import cartReducer from \"./cartReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // Local storage for persistence\r\n\r\n\r\n//const stripe = require('stripe')('pk_test_51Nh8aOFJOqhv3053x1RQF8aROyyt8AXUWxtY5VHvp0ZUKeYlu24GRux3TC8bALDJ3o68h10UshxFNIxoeUvXDqHq008yG8u5Lr');\r\n\r\n// Configuration for Redux Persist\r\nconst persistConfig = {\r\n  key: \"root\", // Key to identify the root of the persisted state\r\n  version: 1,\r\n  storage, // Storage method (local storage in this case)\r\n};\r\n\r\n// Create a persisted reducer using Redux Persist\r\nconst persistedReducer = persistReducer(persistConfig, cartReducer);\r\n\r\n// Configure the Redux store\r\nexport const store = configureStore({\r\n  reducer: {\r\n    cart: persistedReducer, // Using the persisted reducer for the 'cart' slice\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n   // Configure serializability checking for actions\r\n    getDefaultMiddleware({\r\n            // Ignore these specific action types when checking serializability\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\n// Create a persistor to persist the store using Redux Persist\r\nexport let persistor = persistStore(store);\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAC;;AAGjD;;AAEA;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EAAE;EACbC,OAAO,EAAE,CAAC;EACVH,OAAO,CAAE;AACX,CAAC;;AAED;AACA,MAAMI,gBAAgB,GAAGX,cAAc,CAACQ,aAAa,EAAEX,WAAW,CAAC;;AAEnE;AACA,OAAO,MAAMe,KAAK,GAAGd,cAAc,CAAC;EAClCe,OAAO,EAAE;IACPC,IAAI,EAAEH,gBAAgB,CAAE;EAC1B,CAAC;;EACDI,UAAU,EAAGC,oBAAoB;EAChC;EACCA,oBAAoB,CAAC;IACb;IACNC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACjB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,OAAO,IAAIa,SAAS,GAAGpB,YAAY,CAACa,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}